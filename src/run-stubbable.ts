import { readFileSync, writeFileSync } from 'fs';
import { jsonIgnoreReplacer } from 'json-ignore';
import * as vscode from 'vscode';
import { InputBoxExecution } from './input-box';
import { QuickPickAction } from "./quick-pick";
import { WorkspaceConfiguration, replacer, reviver } from './workspace-configuration';

// STUBBABLE_TEST_FILE_PATH is the path to the file to which stubbable data is written.
// This is needed to communicate data between the test code and the separate extension executable
// that is generated by the vscode-test-cli.
const STUBBABLE_TEST_FILE_PATH = process.env.VSCODE_STUBBABLE_TEST_FILE;

// TEST_MODE is whether or not the
export const TEST_MODE: boolean = !!STUBBABLE_TEST_FILE_PATH;

// StubbablesConfig is the VS Code configuration defined on a per-test basis.
export interface StubbablesConfig {
  /**
   * The set of quick pick Actions.
   */
  quickPickActions?: QuickPickAction[];

  /**
   * The expected set of quick pick executions to have run during the test.
   */
  expectedQuickPickExecutions?: (vscode.QuickPickItem | string)[][];

  /**
   * The vscode.WorkspaceConfiguration that is configured at the start of the test (this can be modified during test execution).
   */
  workspaceConfiguration?: WorkspaceConfiguration;

  /**
   * The expected vscode.WorkspaceConfiguration at the end of the test. If unset, then the test will verify that
   * the configuration was unchanged.
   */
  expectedWorkspaceConfiguration?: WorkspaceConfiguration;

  /**
   * The expected set of info messages to be displayed.
   */
  expectedInfoMessages?: string[];

  /**
   * The expected set of error messages to be displayed.
   */
  expectedErrorMessages?: string[];

  /**
   * The input box responses to return.
   */
  inputBoxResponses?: (string | undefined)[];

  /**
   * The expected input box executions.
   */
  expectedInputBoxes?: InputBoxExecution[];
}

// StubbablesConfigInternal is an internal model used for storing additional fields required for testing.
// IMPORTANT NOTE: Only fields for stubbed methods should be added here
// Everything else should be added to verify.testData.
export interface StubbablesConfigInternal extends StubbablesConfig {
  // The quick picks that were generated.
  gotQuickPickOptions?: vscode.QuickPickItem[][];

  // The WorkspaceConfiguration resulting from the test.
  gotWorkspaceConfiguration?: WorkspaceConfiguration;

  // If there is any error in stubbables configuration internal logic, it is set here.
  error?: string;

  // Whether or not the config has changed
  changed?: boolean;
}

export function runStubbableMethodNoInput<O>(nonTestLogic: () => O, testLogic: (config: StubbablesConfigInternal) => O): () => O {
  return runStubbableMethodTwoArgs<void, void, O>(
    () => nonTestLogic(),
    (input1: void, input2: void, sc: StubbablesConfigInternal) => testLogic(sc),
  );
}

export function runStubbableMethod<I, O>(nonTestLogic: (input: I) => O, testLogic: (input: I, config: StubbablesConfigInternal) => O): (input: I) => O {
  return runStubbableMethodTwoArgs<I, void, O>(
    nonTestLogic,
    (input1: I, input2: void, sc: StubbablesConfigInternal) => testLogic(input1, sc),
  );
}

export function runStubbableMethodTwoArgs<I1, I2, O>(nonTestLogic: (input1: I1, input2: I2) => O, testLogic: (input1: I1, input2: I2, config: StubbablesConfigInternal) => O): (input1: I1, input2: I2) => O {
  return (input1: I1, input2: I2) => {
    if (!STUBBABLE_TEST_FILE_PATH) {
      return nonTestLogic(input1, input2);
    }

    let stubbableConfig: StubbablesConfigInternal;
    try {
      stubbableConfig = JSONParse(readFileSync(STUBBABLE_TEST_FILE_PATH).toString());
    } catch (e) {
      vscode.window.showErrorMessage(`Failed to read/parse stubbables test file: ${e}`);
      return nonTestLogic(input1, input2);
    }
    stubbableConfig.changed = undefined;

    const ret = testLogic(input1, input2, stubbableConfig);

    try {
      if (stubbableConfig.changed) {
        // jsonIgnoreReplacer ensures that relevant @jsonIgnore() annotated fields aren't included
        writeFileSync(STUBBABLE_TEST_FILE_PATH, JSONStringify(stubbableConfig));
      }
    } catch (e) {
      vscode.window.showErrorMessage(`Failed to write stubbables config back test file: ${e}`);
    }

    return ret;
  };
}

export function JSONParse(text: string) {
  return JSON.parse(text, reviver);
}

export function JSONStringify(obj: any) {
  return JSON.stringify(obj, doubleReplacer);
}

function doubleReplacer(this: any, key: string, value: any): any {
  return replacer(key, jsonIgnoreReplacer(key, value));
}
